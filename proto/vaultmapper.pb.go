// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: VaultMapperProtocol/vaultmapper.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_VAULT               MessageType = 0
	MessageType_VAULT_PLAYER        MessageType = 1
	MessageType_VAULT_CELL          MessageType = 2
	MessageType_PLAYER_DISCONNECT   MessageType = 3
	MessageType_TOAST               MessageType = 4
	MessageType_VIEWER_CODE_REQUEST MessageType = 5
	MessageType_VIEWER_CODE         MessageType = 6
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "VAULT",
		1: "VAULT_PLAYER",
		2: "VAULT_CELL",
		3: "PLAYER_DISCONNECT",
		4: "TOAST",
		5: "VIEWER_CODE_REQUEST",
		6: "VIEWER_CODE",
	}
	MessageType_value = map[string]int32{
		"VAULT":               0,
		"VAULT_PLAYER":        1,
		"VAULT_CELL":          2,
		"PLAYER_DISCONNECT":   3,
		"TOAST":               4,
		"VIEWER_CODE_REQUEST": 5,
		"VIEWER_CODE":         6,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_VaultMapperProtocol_vaultmapper_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_VaultMapperProtocol_vaultmapper_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{0}
}

type CellType int32

const (
	CellType_CELLTYPE_UNKNOWN  CellType = 0
	CellType_CELLTYPE_ROOM     CellType = 1
	CellType_CELLTYPE_TUNNEL_X CellType = 2
	CellType_CELLTYPE_TUNNEL_Z CellType = 3
)

// Enum value maps for CellType.
var (
	CellType_name = map[int32]string{
		0: "CELLTYPE_UNKNOWN",
		1: "CELLTYPE_ROOM",
		2: "CELLTYPE_TUNNEL_X",
		3: "CELLTYPE_TUNNEL_Z",
	}
	CellType_value = map[string]int32{
		"CELLTYPE_UNKNOWN":  0,
		"CELLTYPE_ROOM":     1,
		"CELLTYPE_TUNNEL_X": 2,
		"CELLTYPE_TUNNEL_Z": 3,
	}
)

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}

func (x CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_VaultMapperProtocol_vaultmapper_proto_enumTypes[1].Descriptor()
}

func (CellType) Type() protoreflect.EnumType {
	return &file_VaultMapperProtocol_vaultmapper_proto_enumTypes[1]
}

func (x CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellType.Descriptor instead.
func (CellType) EnumDescriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{1}
}

type RoomType int32

const (
	RoomType_ROOMTYPE_UNKNOWN   RoomType = 0
	RoomType_ROOMTYPE_START     RoomType = 1
	RoomType_ROOMTYPE_BASIC     RoomType = 2
	RoomType_ROOMTYPE_ORE       RoomType = 3
	RoomType_ROOMTYPE_CHALLENGE RoomType = 4
	RoomType_ROOMTYPE_OMEGA     RoomType = 5
	RoomType_ROOMTYPE_RESOURCE  RoomType = 6
)

// Enum value maps for RoomType.
var (
	RoomType_name = map[int32]string{
		0: "ROOMTYPE_UNKNOWN",
		1: "ROOMTYPE_START",
		2: "ROOMTYPE_BASIC",
		3: "ROOMTYPE_ORE",
		4: "ROOMTYPE_CHALLENGE",
		5: "ROOMTYPE_OMEGA",
		6: "ROOMTYPE_RESOURCE",
	}
	RoomType_value = map[string]int32{
		"ROOMTYPE_UNKNOWN":   0,
		"ROOMTYPE_START":     1,
		"ROOMTYPE_BASIC":     2,
		"ROOMTYPE_ORE":       3,
		"ROOMTYPE_CHALLENGE": 4,
		"ROOMTYPE_OMEGA":     5,
		"ROOMTYPE_RESOURCE":  6,
	}
)

func (x RoomType) Enum() *RoomType {
	p := new(RoomType)
	*p = x
	return p
}

func (x RoomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomType) Descriptor() protoreflect.EnumDescriptor {
	return file_VaultMapperProtocol_vaultmapper_proto_enumTypes[2].Descriptor()
}

func (RoomType) Type() protoreflect.EnumType {
	return &file_VaultMapperProtocol_vaultmapper_proto_enumTypes[2]
}

func (x RoomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomType.Descriptor instead.
func (RoomType) EnumDescriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{2}
}

type RoomName int32

const (
	RoomName_ROOMNAME_UNKNOWN          RoomName = 0
	RoomName_ROOMNAME_BLACKSMITH       RoomName = 1
	RoomName_ROOMNAME_COVE             RoomName = 2
	RoomName_ROOMNAME_CRYSTAL_CAVES    RoomName = 3
	RoomName_ROOMNAME_DIG_SITE         RoomName = 4
	RoomName_ROOMNAME_DRAGON           RoomName = 5
	RoomName_ROOMNAME_FACTORY          RoomName = 6
	RoomName_ROOMNAME_LIBRARY          RoomName = 7
	RoomName_ROOMNAME_MINE             RoomName = 8
	RoomName_ROOMNAME_MUSH_ROOM        RoomName = 9
	RoomName_ROOMNAME_PAINTING         RoomName = 10
	RoomName_ROOMNAME_VENDOR           RoomName = 11
	RoomName_ROOMNAME_VILLAGE          RoomName = 12
	RoomName_ROOMNAME_WILD_WEST        RoomName = 13
	RoomName_ROOMNAME_X_MARK           RoomName = 14
	RoomName_ROOMNAME_CUBE             RoomName = 15
	RoomName_ROOMNAME_LAB              RoomName = 16
	RoomName_ROOMNAME_RAID             RoomName = 17
	RoomName_ROOMNAME_PIRATE_CAVE      RoomName = 18
	RoomName_ROOMNAME_GARDEN           RoomName = 19
	RoomName_ROOMNAME_ARCADE           RoomName = 20
	RoomName_ROOMNAME_COMET            RoomName = 21
	RoomName_ROOMNAME_PLAYZONE         RoomName = 22
	RoomName_ROOMNAME_HELLISH_DIG_SITE RoomName = 23
	RoomName_ROOMNAME_FARM             RoomName = 24
	RoomName_ROOMNAME_QUARRY           RoomName = 25
	RoomName_ROOMNAME_CHROMATIC_CAVES  RoomName = 26
	RoomName_ROOMNAME_MODDED_CAVES     RoomName = 27
	RoomName_ROOMNAME_NETHER           RoomName = 28
	RoomName_ROOMNAME_END              RoomName = 29
	RoomName_ROOMNAME_EMERALD_CAVES    RoomName = 30
	RoomName_ROOMNAME_DIAMOND_CAVES    RoomName = 31
	RoomName_ROOMNAME_BOSS             RoomName = 32
)

// Enum value maps for RoomName.
var (
	RoomName_name = map[int32]string{
		0:  "ROOMNAME_UNKNOWN",
		1:  "ROOMNAME_BLACKSMITH",
		2:  "ROOMNAME_COVE",
		3:  "ROOMNAME_CRYSTAL_CAVES",
		4:  "ROOMNAME_DIG_SITE",
		5:  "ROOMNAME_DRAGON",
		6:  "ROOMNAME_FACTORY",
		7:  "ROOMNAME_LIBRARY",
		8:  "ROOMNAME_MINE",
		9:  "ROOMNAME_MUSH_ROOM",
		10: "ROOMNAME_PAINTING",
		11: "ROOMNAME_VENDOR",
		12: "ROOMNAME_VILLAGE",
		13: "ROOMNAME_WILD_WEST",
		14: "ROOMNAME_X_MARK",
		15: "ROOMNAME_CUBE",
		16: "ROOMNAME_LAB",
		17: "ROOMNAME_RAID",
		18: "ROOMNAME_PIRATE_CAVE",
		19: "ROOMNAME_GARDEN",
		20: "ROOMNAME_ARCADE",
		21: "ROOMNAME_COMET",
		22: "ROOMNAME_PLAYZONE",
		23: "ROOMNAME_HELLISH_DIG_SITE",
		24: "ROOMNAME_FARM",
		25: "ROOMNAME_QUARRY",
		26: "ROOMNAME_CHROMATIC_CAVES",
		27: "ROOMNAME_MODDED_CAVES",
		28: "ROOMNAME_NETHER",
		29: "ROOMNAME_END",
		30: "ROOMNAME_EMERALD_CAVES",
		31: "ROOMNAME_DIAMOND_CAVES",
		32: "ROOMNAME_BOSS",
	}
	RoomName_value = map[string]int32{
		"ROOMNAME_UNKNOWN":          0,
		"ROOMNAME_BLACKSMITH":       1,
		"ROOMNAME_COVE":             2,
		"ROOMNAME_CRYSTAL_CAVES":    3,
		"ROOMNAME_DIG_SITE":         4,
		"ROOMNAME_DRAGON":           5,
		"ROOMNAME_FACTORY":          6,
		"ROOMNAME_LIBRARY":          7,
		"ROOMNAME_MINE":             8,
		"ROOMNAME_MUSH_ROOM":        9,
		"ROOMNAME_PAINTING":         10,
		"ROOMNAME_VENDOR":           11,
		"ROOMNAME_VILLAGE":          12,
		"ROOMNAME_WILD_WEST":        13,
		"ROOMNAME_X_MARK":           14,
		"ROOMNAME_CUBE":             15,
		"ROOMNAME_LAB":              16,
		"ROOMNAME_RAID":             17,
		"ROOMNAME_PIRATE_CAVE":      18,
		"ROOMNAME_GARDEN":           19,
		"ROOMNAME_ARCADE":           20,
		"ROOMNAME_COMET":            21,
		"ROOMNAME_PLAYZONE":         22,
		"ROOMNAME_HELLISH_DIG_SITE": 23,
		"ROOMNAME_FARM":             24,
		"ROOMNAME_QUARRY":           25,
		"ROOMNAME_CHROMATIC_CAVES":  26,
		"ROOMNAME_MODDED_CAVES":     27,
		"ROOMNAME_NETHER":           28,
		"ROOMNAME_END":              29,
		"ROOMNAME_EMERALD_CAVES":    30,
		"ROOMNAME_DIAMOND_CAVES":    31,
		"ROOMNAME_BOSS":             32,
	}
)

func (x RoomName) Enum() *RoomName {
	p := new(RoomName)
	*p = x
	return p
}

func (x RoomName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomName) Descriptor() protoreflect.EnumDescriptor {
	return file_VaultMapperProtocol_vaultmapper_proto_enumTypes[3].Descriptor()
}

func (RoomName) Type() protoreflect.EnumType {
	return &file_VaultMapperProtocol_vaultmapper_proto_enumTypes[3]
}

func (x RoomName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomName.Descriptor instead.
func (RoomName) EnumDescriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{3}
}

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=MessageType" json:"type,omitempty"`
	// ditched oneof because protoc refused to generate it properly
	Vault             *Vault             `protobuf:"bytes,2,opt,name=vault,proto3" json:"vault,omitempty"`
	VaultPlayer       *VaultPlayer       `protobuf:"bytes,3,opt,name=vaultPlayer,proto3" json:"vaultPlayer,omitempty"`
	VaultCell         *VaultCell         `protobuf:"bytes,4,opt,name=vaultCell,proto3" json:"vaultCell,omitempty"`
	PlayerDisconnect  *PlayerDisconnect  `protobuf:"bytes,5,opt,name=playerDisconnect,proto3" json:"playerDisconnect,omitempty"`
	Toast             *Toast             `protobuf:"bytes,6,opt,name=toast,proto3" json:"toast,omitempty"`
	ViewerCodeRequest *ViewerCodeRequest `protobuf:"bytes,7,opt,name=viewerCodeRequest,proto3" json:"viewerCodeRequest,omitempty"`
	ViewerCode        *ViewerCode        `protobuf:"bytes,8,opt,name=viewerCode,proto3" json:"viewerCode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_VAULT
}

func (x *Message) GetVault() *Vault {
	if x != nil {
		return x.Vault
	}
	return nil
}

func (x *Message) GetVaultPlayer() *VaultPlayer {
	if x != nil {
		return x.VaultPlayer
	}
	return nil
}

func (x *Message) GetVaultCell() *VaultCell {
	if x != nil {
		return x.VaultCell
	}
	return nil
}

func (x *Message) GetPlayerDisconnect() *PlayerDisconnect {
	if x != nil {
		return x.PlayerDisconnect
	}
	return nil
}

func (x *Message) GetToast() *Toast {
	if x != nil {
		return x.Toast
	}
	return nil
}

func (x *Message) GetViewerCodeRequest() *ViewerCodeRequest {
	if x != nil {
		return x.ViewerCodeRequest
	}
	return nil
}

func (x *Message) GetViewerCode() *ViewerCode {
	if x != nil {
		return x.ViewerCode
	}
	return nil
}

type Toast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Toast) Reset() {
	*x = Toast{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Toast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toast) ProtoMessage() {}

func (x *Toast) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toast.ProtoReflect.Descriptor instead.
func (*Toast) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{1}
}

func (x *Toast) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ViewerCodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewerCodeRequest) Reset() {
	*x = ViewerCodeRequest{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewerCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewerCodeRequest) ProtoMessage() {}

func (x *ViewerCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewerCodeRequest.ProtoReflect.Descriptor instead.
func (*ViewerCodeRequest) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{2}
}

type ViewerCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewerCode) Reset() {
	*x = ViewerCode{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewerCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewerCode) ProtoMessage() {}

func (x *ViewerCode) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewerCode.ProtoReflect.Descriptor instead.
func (*ViewerCode) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{3}
}

func (x *ViewerCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Vault struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cells         []*VaultCell           `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	Players       []*VaultPlayer         `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vault) Reset() {
	*x = Vault{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vault) ProtoMessage() {}

func (x *Vault) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vault.ProtoReflect.Descriptor instead.
func (*Vault) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{4}
}

func (x *Vault) GetCells() []*VaultCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *Vault) GetPlayers() []*VaultPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type VaultPlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"zigzag32,1,opt,name=x,proto3" json:"x,omitempty"`
	Z             int32                  `protobuf:"zigzag32,2,opt,name=z,proto3" json:"z,omitempty"`
	Uuid          string                 `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Color         *Color                 `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Yaw           float32                `protobuf:"fixed32,5,opt,name=yaw,proto3" json:"yaw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultPlayer) Reset() {
	*x = VaultPlayer{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultPlayer) ProtoMessage() {}

func (x *VaultPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultPlayer.ProtoReflect.Descriptor instead.
func (*VaultPlayer) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{5}
}

func (x *VaultPlayer) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VaultPlayer) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *VaultPlayer) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VaultPlayer) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *VaultPlayer) GetYaw() float32 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

type Color struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	R             uint32                 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	G             uint32                 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	B             uint32                 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Color) Reset() {
	*x = Color{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{6}
}

func (x *Color) GetR() uint32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Color) GetG() uint32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Color) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

type VaultCell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"zigzag32,1,opt,name=x,proto3" json:"x,omitempty"`
	Z             int32                  `protobuf:"zigzag32,2,opt,name=z,proto3" json:"z,omitempty"`
	CellType      CellType               `protobuf:"varint,3,opt,name=cellType,proto3,enum=CellType" json:"cellType,omitempty"`
	RoomType      RoomType               `protobuf:"varint,4,opt,name=roomType,proto3,enum=RoomType" json:"roomType,omitempty"`
	RoomName      RoomName               `protobuf:"varint,5,opt,name=roomName,proto3,enum=RoomName" json:"roomName,omitempty"`
	Explored      bool                   `protobuf:"varint,6,opt,name=explored,proto3" json:"explored,omitempty"`
	Inscribed     bool                   `protobuf:"varint,7,opt,name=inscribed,proto3" json:"inscribed,omitempty"`
	Marked        bool                   `protobuf:"varint,8,opt,name=marked,proto3" json:"marked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultCell) Reset() {
	*x = VaultCell{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultCell) ProtoMessage() {}

func (x *VaultCell) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultCell.ProtoReflect.Descriptor instead.
func (*VaultCell) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{7}
}

func (x *VaultCell) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VaultCell) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *VaultCell) GetCellType() CellType {
	if x != nil {
		return x.CellType
	}
	return CellType_CELLTYPE_UNKNOWN
}

func (x *VaultCell) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_ROOMTYPE_UNKNOWN
}

func (x *VaultCell) GetRoomName() RoomName {
	if x != nil {
		return x.RoomName
	}
	return RoomName_ROOMNAME_UNKNOWN
}

func (x *VaultCell) GetExplored() bool {
	if x != nil {
		return x.Explored
	}
	return false
}

func (x *VaultCell) GetInscribed() bool {
	if x != nil {
		return x.Inscribed
	}
	return false
}

func (x *VaultCell) GetMarked() bool {
	if x != nil {
		return x.Marked
	}
	return false
}

type PlayerDisconnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerDisconnect) Reset() {
	*x = PlayerDisconnect{}
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDisconnect) ProtoMessage() {}

func (x *PlayerDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_VaultMapperProtocol_vaultmapper_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDisconnect.ProtoReflect.Descriptor instead.
func (*PlayerDisconnect) Descriptor() ([]byte, []int) {
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerDisconnect) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

var File_VaultMapperProtocol_vaultmapper_proto protoreflect.FileDescriptor

var file_VaultMapperProtocol_vaultmapper_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x3d, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x05,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x21, 0x0a, 0x05, 0x54, 0x6f, 0x61,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x20, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x05, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x26,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01,
	0x7a, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x79, 0x61, 0x77, 0x22, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0c,
	0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x01, 0x7a, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x2a, 0x86, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45,
	0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x06, 0x2a, 0x61, 0x0a, 0x08, 0x43, 0x65,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x45, 0x4c, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x45, 0x4c, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x58, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x45, 0x4c, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x5a, 0x10, 0x03, 0x2a, 0x9d, 0x01,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f,
	0x4f, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4f, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f,
	0x4f, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4d, 0x45, 0x47, 0x41, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4f, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x2a, 0xf3, 0x05,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f,
	0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x53, 0x4d, 0x49, 0x54, 0x48, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f,
	0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c,
	0x5f, 0x43, 0x41, 0x56, 0x45, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4f, 0x4d,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f,
	0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4d, 0x55, 0x53, 0x48, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4f, 0x4d, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x56, 0x49, 0x4c, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4c, 0x44, 0x5f, 0x57,
	0x45, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x58, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f,
	0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x55, 0x42, 0x45, 0x10, 0x0f, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x10, 0x10, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50,
	0x49, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x56, 0x45, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10,
	0x13, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x52,
	0x43, 0x41, 0x44, 0x45, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x45, 0x54, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f,
	0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5a, 0x4f, 0x4e, 0x45, 0x10,
	0x16, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x45,
	0x4c, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x17,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x52,
	0x4d, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x51, 0x55, 0x41, 0x52, 0x52, 0x59, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4f, 0x4d,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43,
	0x41, 0x56, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x56, 0x45, 0x53, 0x10,
	0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4f, 0x4d,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x56,
	0x45, 0x53, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x56, 0x45, 0x53, 0x10, 0x1f,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x4d, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x53,
	0x53, 0x10, 0x20, 0x42, 0x41, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x10, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x06,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_VaultMapperProtocol_vaultmapper_proto_rawDescOnce sync.Once
	file_VaultMapperProtocol_vaultmapper_proto_rawDescData []byte
)

func file_VaultMapperProtocol_vaultmapper_proto_rawDescGZIP() []byte {
	file_VaultMapperProtocol_vaultmapper_proto_rawDescOnce.Do(func() {
		file_VaultMapperProtocol_vaultmapper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_VaultMapperProtocol_vaultmapper_proto_rawDesc), len(file_VaultMapperProtocol_vaultmapper_proto_rawDesc)))
	})
	return file_VaultMapperProtocol_vaultmapper_proto_rawDescData
}

var file_VaultMapperProtocol_vaultmapper_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_VaultMapperProtocol_vaultmapper_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_VaultMapperProtocol_vaultmapper_proto_goTypes = []any{
	(MessageType)(0),          // 0: MessageType
	(CellType)(0),             // 1: CellType
	(RoomType)(0),             // 2: RoomType
	(RoomName)(0),             // 3: RoomName
	(*Message)(nil),           // 4: Message
	(*Toast)(nil),             // 5: Toast
	(*ViewerCodeRequest)(nil), // 6: ViewerCodeRequest
	(*ViewerCode)(nil),        // 7: ViewerCode
	(*Vault)(nil),             // 8: Vault
	(*VaultPlayer)(nil),       // 9: VaultPlayer
	(*Color)(nil),             // 10: Color
	(*VaultCell)(nil),         // 11: VaultCell
	(*PlayerDisconnect)(nil),  // 12: PlayerDisconnect
}
var file_VaultMapperProtocol_vaultmapper_proto_depIdxs = []int32{
	0,  // 0: Message.type:type_name -> MessageType
	8,  // 1: Message.vault:type_name -> Vault
	9,  // 2: Message.vaultPlayer:type_name -> VaultPlayer
	11, // 3: Message.vaultCell:type_name -> VaultCell
	12, // 4: Message.playerDisconnect:type_name -> PlayerDisconnect
	5,  // 5: Message.toast:type_name -> Toast
	6,  // 6: Message.viewerCodeRequest:type_name -> ViewerCodeRequest
	7,  // 7: Message.viewerCode:type_name -> ViewerCode
	11, // 8: Vault.cells:type_name -> VaultCell
	9,  // 9: Vault.players:type_name -> VaultPlayer
	10, // 10: VaultPlayer.color:type_name -> Color
	1,  // 11: VaultCell.cellType:type_name -> CellType
	2,  // 12: VaultCell.roomType:type_name -> RoomType
	3,  // 13: VaultCell.roomName:type_name -> RoomName
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_VaultMapperProtocol_vaultmapper_proto_init() }
func file_VaultMapperProtocol_vaultmapper_proto_init() {
	if File_VaultMapperProtocol_vaultmapper_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_VaultMapperProtocol_vaultmapper_proto_rawDesc), len(file_VaultMapperProtocol_vaultmapper_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_VaultMapperProtocol_vaultmapper_proto_goTypes,
		DependencyIndexes: file_VaultMapperProtocol_vaultmapper_proto_depIdxs,
		EnumInfos:         file_VaultMapperProtocol_vaultmapper_proto_enumTypes,
		MessageInfos:      file_VaultMapperProtocol_vaultmapper_proto_msgTypes,
	}.Build()
	File_VaultMapperProtocol_vaultmapper_proto = out.File
	file_VaultMapperProtocol_vaultmapper_proto_goTypes = nil
	file_VaultMapperProtocol_vaultmapper_proto_depIdxs = nil
}
